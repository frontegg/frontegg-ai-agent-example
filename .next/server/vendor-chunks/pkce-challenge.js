"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pkce-challenge";
exports.ids = ["vendor-chunks/pkce-challenge"];
exports.modules = {

/***/ "(rsc)/./node_modules/pkce-challenge/dist/index.node.js":
/*!********************************************************!*\
  !*** ./node_modules/pkce-challenge/dist/index.node.js ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pkceChallenge),\n/* harmony export */   generateChallenge: () => (/* binding */ generateChallenge),\n/* harmony export */   verifyChallenge: () => (/* binding */ verifyChallenge)\n/* harmony export */ });\nlet crypto;\ncrypto =\n    globalThis.crypto?.webcrypto ?? // Node.js 16 REPL has globalThis.crypto as node:crypto\n        globalThis.crypto ?? // Node.js 18+ \n        (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:crypto */ \"node:crypto\", 19))).webcrypto; // Node.js 16 non-REPL\n/**\n * Creates an array of length `size` of random bytes\n * @param size\n * @returns Array of random ints (0 to 255)\n */\nfunction getRandomValues(size) {\n    return crypto.getRandomValues(new Uint8Array(size));\n}\n/** Generate cryptographically strong random string\n * @param size The desired length of the string\n * @returns The random string\n */\nfunction random(size) {\n    const mask = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~\";\n    let result = \"\";\n    const randomUints = getRandomValues(size);\n    for (let i = 0; i < size; i++) {\n        // cap the value of the randomIndex to mask.length - 1\n        const randomIndex = randomUints[i] % mask.length;\n        result += mask[randomIndex];\n    }\n    return result;\n}\n/** Generate a PKCE challenge verifier\n * @param length Length of the verifier\n * @returns A random verifier `length` characters long\n */\nfunction generateVerifier(length) {\n    return random(length);\n}\n/** Generate a PKCE code challenge from a code verifier\n * @param code_verifier\n * @returns The base64 url encoded code challenge\n */\nasync function generateChallenge(code_verifier) {\n    const buffer = await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(code_verifier));\n    // Generate base64url string\n    // btoa is deprecated in Node.js but is used here for web browser compatibility\n    // (which has no good replacement yet, see also https://github.com/whatwg/html/issues/6811)\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)))\n        .replace(/\\//g, '_')\n        .replace(/\\+/g, '-')\n        .replace(/=/g, '');\n}\n/** Generate a PKCE challenge pair\n * @param length Length of the verifer (between 43-128). Defaults to 43.\n * @returns PKCE challenge pair\n */\nasync function pkceChallenge(length) {\n    if (!length)\n        length = 43;\n    if (length < 43 || length > 128) {\n        throw `Expected a length between 43 and 128. Received ${length}.`;\n    }\n    const verifier = generateVerifier(length);\n    const challenge = await generateChallenge(verifier);\n    return {\n        code_verifier: verifier,\n        code_challenge: challenge,\n    };\n}\n/** Verify that a code_verifier produces the expected code challenge\n * @param code_verifier\n * @param expectedChallenge The code challenge to verify\n * @returns True if challenges are equal. False otherwise.\n */\nasync function verifyChallenge(code_verifier, expectedChallenge) {\n    const actualChallenge = await generateChallenge(code_verifier);\n    return actualChallenge === expectedChallenge;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGtjZS1jaGFsbGVuZ2UvZGlzdC9pbmRleC5ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNEhBQXFCLGFBQWE7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLE9BQU87QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3F1YWxpZmljYXRpb24tYWdlbnQvLi9ub2RlX21vZHVsZXMvcGtjZS1jaGFsbGVuZ2UvZGlzdC9pbmRleC5ub2RlLmpzPzdiZGIiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGNyeXB0bztcbmNyeXB0byA9XG4gICAgZ2xvYmFsVGhpcy5jcnlwdG8/LndlYmNyeXB0byA/PyAvLyBOb2RlLmpzIDE2IFJFUEwgaGFzIGdsb2JhbFRoaXMuY3J5cHRvIGFzIG5vZGU6Y3J5cHRvXG4gICAgICAgIGdsb2JhbFRoaXMuY3J5cHRvID8/IC8vIE5vZGUuanMgMTgrIFxuICAgICAgICAoYXdhaXQgaW1wb3J0KFwibm9kZTpjcnlwdG9cIikpLndlYmNyeXB0bzsgLy8gTm9kZS5qcyAxNiBub24tUkVQTFxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGxlbmd0aCBgc2l6ZWAgb2YgcmFuZG9tIGJ5dGVzXG4gKiBAcGFyYW0gc2l6ZVxuICogQHJldHVybnMgQXJyYXkgb2YgcmFuZG9tIGludHMgKDAgdG8gMjU1KVxuICovXG5mdW5jdGlvbiBnZXRSYW5kb21WYWx1ZXMoc2l6ZSkge1xuICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbn1cbi8qKiBHZW5lcmF0ZSBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcgcmFuZG9tIHN0cmluZ1xuICogQHBhcmFtIHNpemUgVGhlIGRlc2lyZWQgbGVuZ3RoIG9mIHRoZSBzdHJpbmdcbiAqIEByZXR1cm5zIFRoZSByYW5kb20gc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbShzaXplKSB7XG4gICAgY29uc3QgbWFzayA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODktLl9+XCI7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgY29uc3QgcmFuZG9tVWludHMgPSBnZXRSYW5kb21WYWx1ZXMoc2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgLy8gY2FwIHRoZSB2YWx1ZSBvZiB0aGUgcmFuZG9tSW5kZXggdG8gbWFzay5sZW5ndGggLSAxXG4gICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gcmFuZG9tVWludHNbaV0gJSBtYXNrLmxlbmd0aDtcbiAgICAgICAgcmVzdWx0ICs9IG1hc2tbcmFuZG9tSW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqIEdlbmVyYXRlIGEgUEtDRSBjaGFsbGVuZ2UgdmVyaWZpZXJcbiAqIEBwYXJhbSBsZW5ndGggTGVuZ3RoIG9mIHRoZSB2ZXJpZmllclxuICogQHJldHVybnMgQSByYW5kb20gdmVyaWZpZXIgYGxlbmd0aGAgY2hhcmFjdGVycyBsb25nXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVmVyaWZpZXIobGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJhbmRvbShsZW5ndGgpO1xufVxuLyoqIEdlbmVyYXRlIGEgUEtDRSBjb2RlIGNoYWxsZW5nZSBmcm9tIGEgY29kZSB2ZXJpZmllclxuICogQHBhcmFtIGNvZGVfdmVyaWZpZXJcbiAqIEByZXR1cm5zIFRoZSBiYXNlNjQgdXJsIGVuY29kZWQgY29kZSBjaGFsbGVuZ2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ2hhbGxlbmdlKGNvZGVfdmVyaWZpZXIpIHtcbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGNvZGVfdmVyaWZpZXIpKTtcbiAgICAvLyBHZW5lcmF0ZSBiYXNlNjR1cmwgc3RyaW5nXG4gICAgLy8gYnRvYSBpcyBkZXByZWNhdGVkIGluIE5vZGUuanMgYnV0IGlzIHVzZWQgaGVyZSBmb3Igd2ViIGJyb3dzZXIgY29tcGF0aWJpbGl0eVxuICAgIC8vICh3aGljaCBoYXMgbm8gZ29vZCByZXBsYWNlbWVudCB5ZXQsIHNlZSBhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvNjgxMSlcbiAgICByZXR1cm4gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KGJ1ZmZlcikpKVxuICAgICAgICAucmVwbGFjZSgvXFwvL2csICdfJylcbiAgICAgICAgLnJlcGxhY2UoL1xcKy9nLCAnLScpXG4gICAgICAgIC5yZXBsYWNlKC89L2csICcnKTtcbn1cbi8qKiBHZW5lcmF0ZSBhIFBLQ0UgY2hhbGxlbmdlIHBhaXJcbiAqIEBwYXJhbSBsZW5ndGggTGVuZ3RoIG9mIHRoZSB2ZXJpZmVyIChiZXR3ZWVuIDQzLTEyOCkuIERlZmF1bHRzIHRvIDQzLlxuICogQHJldHVybnMgUEtDRSBjaGFsbGVuZ2UgcGFpclxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBwa2NlQ2hhbGxlbmdlKGxlbmd0aCkge1xuICAgIGlmICghbGVuZ3RoKVxuICAgICAgICBsZW5ndGggPSA0MztcbiAgICBpZiAobGVuZ3RoIDwgNDMgfHwgbGVuZ3RoID4gMTI4KSB7XG4gICAgICAgIHRocm93IGBFeHBlY3RlZCBhIGxlbmd0aCBiZXR3ZWVuIDQzIGFuZCAxMjguIFJlY2VpdmVkICR7bGVuZ3RofS5gO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZmllciA9IGdlbmVyYXRlVmVyaWZpZXIobGVuZ3RoKTtcbiAgICBjb25zdCBjaGFsbGVuZ2UgPSBhd2FpdCBnZW5lcmF0ZUNoYWxsZW5nZSh2ZXJpZmllcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29kZV92ZXJpZmllcjogdmVyaWZpZXIsXG4gICAgICAgIGNvZGVfY2hhbGxlbmdlOiBjaGFsbGVuZ2UsXG4gICAgfTtcbn1cbi8qKiBWZXJpZnkgdGhhdCBhIGNvZGVfdmVyaWZpZXIgcHJvZHVjZXMgdGhlIGV4cGVjdGVkIGNvZGUgY2hhbGxlbmdlXG4gKiBAcGFyYW0gY29kZV92ZXJpZmllclxuICogQHBhcmFtIGV4cGVjdGVkQ2hhbGxlbmdlIFRoZSBjb2RlIGNoYWxsZW5nZSB0byB2ZXJpZnlcbiAqIEByZXR1cm5zIFRydWUgaWYgY2hhbGxlbmdlcyBhcmUgZXF1YWwuIEZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeUNoYWxsZW5nZShjb2RlX3ZlcmlmaWVyLCBleHBlY3RlZENoYWxsZW5nZSkge1xuICAgIGNvbnN0IGFjdHVhbENoYWxsZW5nZSA9IGF3YWl0IGdlbmVyYXRlQ2hhbGxlbmdlKGNvZGVfdmVyaWZpZXIpO1xuICAgIHJldHVybiBhY3R1YWxDaGFsbGVuZ2UgPT09IGV4cGVjdGVkQ2hhbGxlbmdlO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pkce-challenge/dist/index.node.js\n");

/***/ })

};
;