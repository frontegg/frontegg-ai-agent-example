import { logger } from '../utils/logger';
import { mcpClient } from './mcp';

// Interface for notification response
interface NotificationResponse {
  success: boolean;
  message: string;
  timestamp?: string;
}

// Interface for Slack message response
interface SlackMessageResponse {
  ok: boolean;
  error?: string;
  ts?: string;
  channel?: string;
}

/**
 * Send qualification notification to Slack
 */
export async function sendQualificationNotification(
  company: string, 
  assessment: string
): Promise<NotificationResponse> {
  try {
    logger.info(`Sending qualification notification for ${company} to Slack`);
    
    const channelName = 'signpus-qualifications-agent';
    const channelId = 'C08KN71QZD1'; // Hardcoded channel ID
    
    // Format the message for Slack
    const formattedText = formatSlackMessage(company, assessment);
    
    // Send message using slack_post_message tool
    logger.info(`Attempting to post message to channel ${channelId} using slack_post_message`);
    const response = await mcpClient.executeTool('slack', 'slack_post_message', {
      channel_id: channelId,
      text: formattedText
    }) as SlackMessageResponse;
    
    logger.debug(`slack_post_message response: ${JSON.stringify(response)}`);
    
    if (!response.ok) {
      const errorMsg = response.error || 'Unknown error';
      logger.error(`Failed to send message: ${errorMsg}`);
      if (errorMsg.includes('not_in_channel')) {
        throw new Error(
          `Bot is not in the channel "${channelName}". ` +
          `Please invite the bot using "/invite @YourBotName" in the channel.`
        );
      }
      throw new Error(`Failed to send message: ${errorMsg}`);
    }
    
    const notificationResponse: NotificationResponse = {
      success: true,
      message: `Notification for ${company} sent successfully to channel ${channelName} (${channelId})`,
      timestamp: response.ts
    };
    
    logger.info(`Slack notification sent: ${JSON.stringify(notificationResponse)}`);
    return notificationResponse;
  } catch (error) {
    logger.error(`Error sending Slack notification: ${(error as Error).message}`);
    throw error;
  }
}


/**
 * Format message for Slack
 */
function formatSlackMessage(company: string, assessment: string): string {
  // Create a formatted message for Slack with emoji indicators
  const timestamp = new Date().toLocaleString();
  return `üè¢ *New Lead Qualification: ${company}*\n\n` +
         `üìã *Assessment:*\n${assessment}\n\n` +
         `‚è∞ _Generated by AI Agent at ${timestamp}_`;
} 